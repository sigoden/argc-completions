#!/usr/bin/env bash
# Automatic generated, DON'T MODIFY IT.

# @flag -h --help                                  show this help message and exit
# @option --openai-api-key <OPENAI_API_KEY>        Specify the OpenAI API key [env var: OPENAI_API_KEY]
# @option --anthropic-api-key <ANTHROPIC_API_KEY>  Specify the Anthropic API key [env var: ANTHROPIC_API_KEY]
# @option --model                                  Specify the model to use for the main chat [env var: AIDER_MODEL]
# @flag --opus                                     Use claude-3-opus-20240229 model for the main chat [env var: AIDER_OPUS]
# @flag --sonnet                                   Use claude-3-5-sonnet-20240620 model for the main chat [env var: AIDER_SONNET]
# @flag -4 --4                                     Use gpt-4-0613 model for the main chat [env var: AIDER_4]
# @flag --4o                                       Use gpt-4o model for the main chat [env var: AIDER_4O]
# @flag --mini                                     Use gpt-4o-mini model for the main chat [env var: AIDER_MINI]
# @flag --4-turbo                                  Use gpt-4-1106-preview model for the main chat [env var: AIDER_4_TURBO]
# @flag -3                                         Use gpt-3.5-turbo model for the main chat [env var: AIDER_35TURBO]
# @flag --35turbo                                  Use gpt-3.5-turbo model for the main chat [env var: AIDER_35TURBO]
# @flag --35-turbo                                 Use gpt-3.5-turbo model for the main chat [env var: AIDER_35TURBO]
# @flag --3                                        Use gpt-3.5-turbo model for the main chat [env var: AIDER_35TURBO]
# @flag --deepseek                                 Use deepseek/deepseek-coder model for the main chat [env var: AIDER_DEEPSEEK]
# @option --models <MODEL>                         List known models which match the (partial) MODEL name [env var: AIDER_MODELS]
# @option --openai-api-base <OPENAI_API_BASE>      Specify the api base url [env var: OPENAI_API_BASE]
# @option --openai-api-type <OPENAI_API_TYPE>      Specify the api_type [env var: OPENAI_API_TYPE]
# @option --openai-api-version <OPENAI_API_VERSION>  Specify the api_version [env var: OPENAI_API_VERSION]
# @option --openai-api-deployment-id <OPENAI_API_DEPLOYMENT_ID>  Specify the deployment_id [env var: OPENAI_API_DEPLOYMENT_ID]
# @option --openai-organization-id <OPENAI_ORGANIZATION_ID>  Specify the OpenAI organization ID [env var: OPENAI_ORGANIZATION_ID]
# @option --model-settings-file <MODEL_SETTINGS_FILE>  Specify a file with aider model settings for unknown models [env var: AIDER_MODEL_SETTINGS_FILE]
# @option --model-metadata-file <MODEL_METADATA_FILE>  Specify a file with context window and costs for unknown models [env var: AIDER_MODEL_METADATA_FILE]
# @flag --verify-ssl                               Verify the SSL cert when connecting to models (default: True) [env var: AIDER_VERIFY_SSL]
# @flag --no-verify-ssl                            Verify the SSL cert when connecting to models (default: True) [env var: AIDER_VERIFY_SSL]
# @option --edit-format <EDIT_FORMAT>              Specify what edit format the LLM should use (default depends on model) [env var: AIDER_EDIT_FORMAT]
# @option --chat-mode <EDIT_FORMAT>                Specify what edit format the LLM should use (default depends on model) [env var: AIDER_EDIT_FORMAT]
# @option --weak-model <WEAK_MODEL>                Specify the model to use for commit messages and chat history summarization (default depends on --model) [env var: AIDER_WEAK_MODEL]
# @flag --show-model-warnings                      Only work with models that have meta-data available (default: True) [env var: AIDER_SHOW_MODEL_WARNINGS]
# @flag --no-show-model-warnings                   Only work with models that have meta-data available (default: True) [env var: AIDER_SHOW_MODEL_WARNINGS]
# @option --map-tokens <MAP_TOKENS>                Suggested number of tokens to use for repo map, use 0 to disable (default: 1024) [env var: AIDER_MAP_TOKENS]
# @option --map-refresh[auto|always|files|manual]  Control how often the repo map is refreshed (default: auto) [env var: AIDER_MAP_REFRESH]
# @flag --cache-prompts                            Enable caching of prompts (default: False) [env var: AIDER_CACHE_PROMPTS]
# @flag --no-cache-prompts                         Enable caching of prompts (default: False) [env var: AIDER_CACHE_PROMPTS]
# @option --map-multiplier-no-files <MAP_MULTIPLIER_NO_FILES>  Multiplier for map tokens when no files are specified (default: 2) [env var: AIDER_MAP_MULTIPLIER_NO_FILES]
# @option --max-chat-history-tokens <MAX_CHAT_HISTORY_TOKENS>  Maximum number of tokens to use for chat history.
# @option --env-file <ENV_FILE>                    Specify the .env file to load (default: .env in git root) [env var: AIDER_ENV_FILE]
# @option --input-history-file <INPUT_HISTORY_FILE>  Specify the chat input history file (default: /home/sigo/w/argc-completions/.aider.input.history) [env var: AIDER_INPUT_HISTORY_FILE]
# @option --chat-history-file <CHAT_HISTORY_FILE>  Specify the chat history file (default: /home/sigo/w/argc-completions/.aider.chat.history.md) [env var: AIDER_CHAT_HISTORY_FILE]
# @flag --restore-chat-history                     Restore the previous chat history messages (default: False) [env var: AIDER_RESTORE_CHAT_HISTORY]
# @flag --no-restore-chat-history                  Restore the previous chat history messages (default: False) [env var: AIDER_RESTORE_CHAT_HISTORY]
# @option --llm-history-file <LLM_HISTORY_FILE>    Log the conversation with the LLM to this file (for example, .aider.llm.history) [env var: AIDER_LLM_HISTORY_FILE]
# @flag --dark-mode                                Use colors suitable for a dark terminal background (default: False) [env var: AIDER_DARK_MODE]
# @flag --light-mode                               Use colors suitable for a light terminal background (default: False) [env var: AIDER_LIGHT_MODE]
# @flag --pretty                                   Enable/disable pretty, colorized output (default: True) [env var: AIDER_PRETTY]
# @flag --no-pretty                                Enable/disable pretty, colorized output (default: True) [env var: AIDER_PRETTY]
# @flag --stream                                   Enable/disable streaming responses (default: True) [env var: AIDER_STREAM]
# @flag --no-stream                                Enable/disable streaming responses (default: True) [env var: AIDER_STREAM]
# @option --user-input-color <USER_INPUT_COLOR>    Set the color for user input (default: ♯00cc00) [env var: AIDER_USER_INPUT_COLOR]
# @option --tool-output-color <TOOL_OUTPUT_COLOR>  Set the color for tool output (default: None) [env var: AIDER_TOOL_OUTPUT_COLOR]
# @option --tool-error-color <TOOL_ERROR_COLOR>    Set the color for tool error messages (default: red) [env var: AIDER_TOOL_ERROR_COLOR]
# @option --assistant-output-color <ASSISTANT_OUTPUT_COLOR>  Set the color for assistant output (default: ♯0088ff) [env var: AIDER_ASSISTANT_OUTPUT_COLOR]
# @option --code-theme <CODE_THEME>                Set the markdown code theme (default: default, other options include monokai, solarized-dark, solarized-light) [env var: AIDER_CODE_THEME]
# @flag --show-diffs                               Show diffs when committing changes (default: False) [env var: AIDER_SHOW_DIFFS]
# @flag --git                                      Enable/disable looking for a git repo (default: True) [env var: AIDER_GIT]
# @flag --no-git                                   Enable/disable looking for a git repo (default: True) [env var: AIDER_GIT]
# @flag --gitignore                                Enable/disable adding .aider* to .gitignore (default: True) [env var: AIDER_GITIGNORE]
# @flag --no-gitignore                             Enable/disable adding .aider* to .gitignore (default: True) [env var: AIDER_GITIGNORE]
# @option --aiderignore                            Specify the aider ignore file (default: .aiderignore in git root) [env var: AIDER_AIDERIGNORE]
# @flag --subtree-only                             Only consider files in the current subtree of the git repository [env var: AIDER_SUBTREE_ONLY]
# @flag --auto-commits                             Enable/disable auto commit of LLM changes (default: True) [env var: AIDER_AUTO_COMMITS]
# @flag --no-auto-commits                          Enable/disable auto commit of LLM changes (default: True) [env var: AIDER_AUTO_COMMITS]
# @flag --dirty-commits                            Enable/disable commits when repo is found dirty (default: True) [env var: AIDER_DIRTY_COMMITS]
# @flag --no-dirty-commits                         Enable/disable commits when repo is found dirty (default: True) [env var: AIDER_DIRTY_COMMITS]
# @flag --attribute-author                         Attribute aider code changes in the git author name (default: True) [env var: AIDER_ATTRIBUTE_AUTHOR]
# @flag --no-attribute-author                      Attribute aider code changes in the git author name (default: True) [env var: AIDER_ATTRIBUTE_AUTHOR]
# @flag --attribute-committer                      Attribute aider commits in the git committer name (default: True) [env var: AIDER_ATTRIBUTE_COMMITTER]
# @flag --no-attribute-committer                   Attribute aider commits in the git committer name (default: True) [env var: AIDER_ATTRIBUTE_COMMITTER]
# @flag --attribute-commit-message-author          Prefix commit messages with 'aider: ' if aider authored the changes (default: False) [env var: AIDER_ATTRIBUTE_COMMIT_MESSAGE_AUTHOR]
# @flag --no-attribute-commit-message-author       Prefix commit messages with 'aider: ' if aider authored the changes (default: False) [env var: AIDER_ATTRIBUTE_COMMIT_MESSAGE_AUTHOR]
# @flag --attribute-commit-message-committer       Prefix all commit messages with 'aider: ' (default: False) [env var: AIDER_ATTRIBUTE_COMMIT_MESSAGE_COMMITTER]
# @flag --no-attribute-commit-message-committer    Prefix all commit messages with 'aider: ' (default: False) [env var: AIDER_ATTRIBUTE_COMMIT_MESSAGE_COMMITTER]
# @flag --commit                                   Commit all pending changes with a suitable commit message, then exit [env var: AIDER_COMMIT]
# @option --commit-prompt <PROMPT>                 Specify a custom prompt for generating commit messages [env var: AIDER_COMMIT_PROMPT]
# @flag --dry-run                                  Perform a dry run without modifying files (default: False) [env var: AIDER_DRY_RUN]
# @flag --no-dry-run                               Perform a dry run without modifying files (default: False) [env var: AIDER_DRY_RUN]
# @flag --lint                                     Lint and fix provided files, or dirty files if none provided [env var: AIDER_LINT]
# @option --lint-cmd <LINT_CMD>                    Specify lint commands to run for different languages, eg: "python: flake8 --select=..." (can be used multiple times) [env var: AIDER_LINT_CMD]
# @flag --auto-lint                                Enable/disable automatic linting after changes (default: True) [env var: AIDER_AUTO_LINT]
# @flag --no-auto-lint                             Enable/disable automatic linting after changes (default: True) [env var: AIDER_AUTO_LINT]
# @option --test-cmd <TEST_CMD>                    Specify command to run tests [env var: AIDER_TEST_CMD]
# @flag --auto-test                                Enable/disable automatic testing after changes (default: False) [env var: AIDER_AUTO_TEST]
# @flag --no-auto-test                             Enable/disable automatic testing after changes (default: False) [env var: AIDER_AUTO_TEST]
# @flag --test                                     Run tests and fix problems found [env var: AIDER_TEST]
# @option --file                                   specify a file to edit (can be used multiple times) [env var: AIDER_FILE]
# @option --read <FILE>                            specify a read-only file (can be used multiple times) [env var: AIDER_READ]
# @flag --vim                                      Use VI editing mode in the terminal (default: False) [env var: AIDER_VIM]
# @option --voice-language <VOICE_LANGUAGE>        Specify the language for voice using ISO 639-1 code (default: auto) [env var: AIDER_VOICE_LANGUAGE]
# @flag --version                                  Show the version number and exit
# @flag --just-check-update                        Check for updates and return status in the exit code [env var: AIDER_JUST_CHECK_UPDATE]
# @flag --check-update                             Check for new aider versions on launch [env var: AIDER_CHECK_UPDATE]
# @flag --no-check-update                          Check for new aider versions on launch [env var: AIDER_CHECK_UPDATE]
# @option --apply <FILE>                           Apply the changes from the given file instead of running the chat (debug) [env var: AIDER_APPLY]
# @flag --yes                                      Always say yes to every confirmation [env var: AIDER_YES]
# @flag -v --verbose                               Enable verbose output [env var: AIDER_VERBOSE]
# @flag --show-repo-map                            Print the repo map and exit (debug) [env var: AIDER_SHOW_REPO_MAP]
# @flag --show-prompts                             Print the system prompts and exit (debug) [env var: AIDER_SHOW_PROMPTS]
# @flag --exit                                     Do all startup activities then exit before accepting user input (debug) [env var: AIDER_EXIT]
# @option -m <COMMAND>                             Specify a single message to send the LLM, process reply then exit (disables chat mode) [env var: AIDER_MESSAGE]
# @option --message <COMMAND>                      Specify a single message to send the LLM, process reply then exit (disables chat mode) [env var: AIDER_MESSAGE]
# @option --msg <COMMAND>                          Specify a single message to send the LLM, process reply then exit (disables chat mode) [env var: AIDER_MESSAGE]
# @option -f --message-file <MESSAGE_FILE>         Specify a file containing the message to send the LLM, process reply, then exit (disables chat mode) [env var: AIDER_MESSAGE_FILE]
# @option --encoding                               Specify the encoding for input and output (default: utf-8) [env var: AIDER_ENCODING]
# @option -c --config <CONFIG_FILE>                Specify the config file (default: search for .aider.conf.yml in git root, cwd or home directory)
# @flag --gui                                      Run aider in your browser [env var: AIDER_GUI]
# @flag --browser                                  Run aider in your browser [env var: AIDER_GUI]
# @arg file*

command eval "$(argc --argc-eval "$0" "$@")"