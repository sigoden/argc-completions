#!/usr/bin/env bash
# Automatic generated, DON'T MODIFY IT.

# @option --avg-wage <int>                  average wage value used for basic COCOMO calculation (default 56286)
# @flag --binary                            disable binary file detection
# @flag --by-file                           display output for every file
# @flag --ci                                enable CI output settings where stdout is ASCII
# @option --cocomo-project-type <string>    change COCOMO model type [organic, semi-detached, embedded, "custom,1,1,1,1"] (default "organic")
# @option --count-as <string>               count extension as language [e.g. jsp:htm,chead:"C Header" maps extension jsp to html and chead to C Header]
# @option --currency-symbol <string>        set currency symbol (default "$")
# @flag --debug                             enable debug output
# @option --eaf <float>                     the effort adjustment factor derived from the cost drivers (1.0 if rated nominal) (default 1)
# @option --exclude-dir* <dir>              directories to exclude (default [.git,.hg,.svn])
# @option -x --exclude-ext* <file>          ignore file extensions (overrides include-ext) [comma separated list: e.g. go,java,js]
# @option -n --exclude-file* <file>         ignore files with matching names [comma separated list: e.g. main.go,_test.go]
# @option --file-gc-count <int>             number of files to parse before turning the GC on (default 10000)
# @option -f --format[tabular|wide|json|csv|csv-stream|cloc-yaml|html|html-table|sql|sql-insert|openmetrics] <string>  set output format (default "tabular")
# @option --format-multi <file>             have multiple format output overriding --format [e.g. tabular:stdout,csv:file.csv,json:file.json]
# @flag --gen                               identify generated files
# @option --generated-markers* <file>       string markers in head of generated files (default [do not edit,<auto-generated />])
# @flag -h --help                           help for scc
# @option -i --include-ext* <file>          limit to file extensions [comma separated list: e.g. go,java,js]
# @flag --include-symlinks                  if set will count symlink files
# @flag -l --languages                      print supported languages and extensions
# @option --large-byte-count <int>          number of bytes a file can contain before being removed from output (default 1000000)
# @option --large-line-count <int>          number of lines a file can contain before being removed from output (default 40000)
# @flag --min                               identify minified files
# @flag -z --min-gen                        identify minified or generated files
# @option --min-gen-line-length <int>       number of bytes per average line for file to be considered minified or generated (default 255)
# @flag --no-cocomo                         remove COCOMO calculation output
# @flag -c --no-complexity                  skip calculation of code complexity
# @flag -d --no-duplicates                  remove duplicate files from stats and output
# @flag --no-gen                            ignore generated files in output (implies --gen)
# @flag --no-gitignore                      disables .gitignore file logic
# @flag --no-ignore                         disables .ignore file logic
# @flag --no-large                          ignore files over certain byte and line size set by max-line-count and max-byte-count
# @flag --no-min                            ignore minified files in output (implies --min)
# @flag --no-min-gen                        ignore minified or generated files in output (implies --min-gen)
# @flag --no-size                           remove size calculation output
# @option -M --not-match* <dir>             ignore files and directories matching regular expression
# @option -o --output <file>                output filename (default stdout)
# @option --overhead <float>                set the overhead multiplier for corporate overhead (facilities, equipment, accounting, etc.) (default 2.4)
# @option --remap-all <file>                inspect every file and remap by checking for a string and remapping the language [e.g. "-*- C++ -*-":"C Header"]
# @option --remap-unknown <file>            inspect files of unknown type and remap by checking for a string and remapping the language [e.g. "-*- C++ -*-":"C Header"]
# @option --size-unit[si|binary|mixed|xkcd-kb|xkcd-kelly|xkcd-imaginary|xkcd-intel|xkcd-drive|xkcd-bakers] <string>  set size unit (default "si")
# @flag --sloccount-format                  print a more SLOCCount like COCOMO calculation
# @option -s --sort[files|name|lines|blanks|code|comments|complexity] <file>  column to sort by (default "files")
# @option --sql-project <string>            use supplied name as the project identifier for the current run.
# @flag -t --trace                          enable trace output (not recommended when processing multiple files)
# @flag -v --verbose                        verbose output
# @flag --version                           version for scc
# @flag -w --wide                           wider output with additional statistics (implies --complexity)
# @arg paths*

command eval "$(argc --argc-eval "$0" "$@")"